/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package day2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        int totalScore = 0;
        int correctTotal =0;
        System.out.println(new App().getGreeting());

        BufferedReader reader;
        URL url = App.class.getResource("/input.txt");

        try{
            reader = new BufferedReader(new FileReader(new File(url.getPath())));
            String line = reader.readLine();

            while (line != null) {
                String[] split = line.split(" ");
                if (split.length >=2){
                    totalScore += score(parseOpponent(split[0]), parsePlayer(split[1]));
                    correctTotal += score(parseOpponent(split[0]), parsePlayer(parseOpponent(split[0]), split[1]));
                } else {
                    System.out.println("Invalid line");
                }
                line = reader.readLine();
            }
        } catch( IOException e) {
            e.printStackTrace();
        }

        System.out.println("Final score: " + totalScore);
        System.out.println("Correct score: " + correctTotal);
    }

    enum Move{
        ROCK,
        PAPER,
        SCISSORS
    }

    private static Move parseOpponent(String opponent){
        if (opponent.equals("A")) return Move.ROCK;
        if (opponent.equals("B")) return Move.PAPER;
        if (opponent.equals("C")) return Move.SCISSORS;
        return null;
    }

    private static Move parsePlayer(String player){
        if (player.equals("X")) return Move.ROCK;
        if (player.equals("Y")) return Move.PAPER;
        if (player.equals("Z")) return Move.SCISSORS;
        return null;
    }

    private static Move parsePlayer(Move opponent, String player){
        if (player.equals("Y")) return opponent;
        //lose
        if (player.equals("X")){
            
            switch(opponent){
                case ROCK:
                    return Move.SCISSORS;
                case PAPER:
                    return Move.ROCK;
                case SCISSORS:
                    return Move.PAPER;
            }
        }
        //win
        if (player.equals("Z")){
            switch(opponent){
                case ROCK:
                    return Move.PAPER;
                case PAPER:
                    return Move.SCISSORS;
                case SCISSORS:
                    return Move.ROCK;
            }
        }
        return null;
    }

    private static int score(Move opponent, Move me){
        int score = value(me);
        // draw
        if (opponent == me){
            score += 3;
        } else {
            score += wins(opponent, me) ? 6 : 0;
        }
        return score;
    }

    private static int value(Move m){
        switch(m) {
            case ROCK:
                return 1;
            case PAPER:
                return 2;
            case SCISSORS:
                return 3;
        }
        return 0;   
    }

    private static boolean wins(Move opponent, Move me){
        switch(opponent) {
            case ROCK:
                if(me==Move.PAPER){
                    return true;
                }
                return false;
            case PAPER:
                if(me==Move.SCISSORS){
                    return true;
                }
                return false;
            case SCISSORS:
                if(me==Move.ROCK){
                    return true;
                }
                return false;
        }
        return false;
    }
}
